plugins {
    id "com.github.nbaztec.coveralls-jacoco" version "1.2.14"
    id "com.diffplug.spotless" version "6.2.0"
    id "jacoco"
    id "java"
    id "maven-publish"
    id "signing"
    id "eclipse"
    id "idea"
    id 'org.jreleaser' version '1.18.0'
    id "org.gradle.test-retry" version "1.5.6"
}

sourceCompatibility = 1.8

group = "com.box"
archivesBaseName = "box-java-sdk"
version = "4.16.3"

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

sourceSets {
    example {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.runtimeClasspath
        }
    }
    intTest {
        java {
            compileClasspath += sourceSets.main.output
            compileClasspath += sourceSets.test.output
            runtimeClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.test.output
        }
    }
}

configurations {
    testsCommonImplementation.extendsFrom(implementation)
    testImplementation.extendsFrom(testsCommonImplementation)
    intTestImplementation.extendsFrom(testsCommonImplementation)
    intTestRuntimeOnly.extendsFrom(testRuntimeOnly)
}

dependencies {
    implementation "com.eclipsesource.minimal-json:minimal-json:0.9.5"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.17.2"
    implementation "com.fasterxml.jackson.core:jackson-core:2.17.2"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.17.2"
    implementation "org.bitbucket.b_c:jose4j:0.9.4"
    implementation "org.bouncycastle:bcprov-jdk18on:1.78.1"
    implementation "org.bouncycastle:bcpkix-jdk18on:1.78.1"
    implementation "com.squareup.okhttp3:okhttp:4.12.0"
    implementation "com.github.luben:zstd-jni:1.5.7-2"
    testsCommonImplementation "junit:junit:4.13.2"
    testsCommonImplementation "org.junit.jupiter:junit-jupiter-api:5.10.0"
    testsCommonImplementation "org.hamcrest:hamcrest-library:2.2"
    testsCommonImplementation "org.mockito:mockito-core:4.8.0"
    testsCommonImplementation "org.slf4j:slf4j-nop:2.0.3"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.10.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.10.0"
    testImplementation "com.github.tomakehurst:wiremock:2.27.2"
    exampleImplementation "com.eclipsesource.minimal-json:minimal-json:0.9.5"
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

javadoc {
    options.windowTitle "Box Java SDK"
    options.noQualifiers "all"
    options.stylesheetFile file("docs/sdk/css/javadoc.css")
    options.noTree true
    options.noIndex true
    options.noHelp true
    options.noDeprecatedList true
    options.noNavBar true
    options.encoding "utf-8"
    options.docEncoding "utf-8"
    options.charSet "utf-8"
    options.linkSource true
    options.links "https://docs.oracle.com/javase/8/docs/api/"
}

tasks.register('runExample', JavaExec) {
    dependsOn "exampleClasses"
    classpath = sourceSets.example.runtimeClasspath
    mainClass = "com.box.sdk.example.Main"
}

tasks.register('runCreateAppUser', JavaExec) {
    dependsOn "exampleClasses"
    classpath = sourceSets.example.runtimeClasspath
    mainClass = "com.box.sdk.example.CreateAppUser"
}

tasks.register('runAccessAsAppUser', JavaExec) {
    dependsOn "exampleClasses"
    classpath = sourceSets.example.runtimeClasspath
    mainClass = "com.box.sdk.example.AccessAsAppUser"
}

tasks.register('integrationTest', Test) {
    description = "Runs the integration tests in com.box.sdk"
    group = "Verification"
    testLogging.showStandardStreams = true
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    useJUnitPlatform()
    include '**/com/box/sdk/**'
    retry {
        maxRetries = 2
        failOnPassedAfterRetry = false
    }
}

tasks.register('integrationTestGen', Test) {
    description = "Runs integration tests in com.box.sdkgen"
    group = "Verification"
    testLogging.showStandardStreams = true
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    useJUnitPlatform()
    include '**/com/box/sdkgen/**'
    retry {
        maxRetries = 2
        failOnPassedAfterRetry = false
    }

    filter {
        // Socket timeout
        excludeTestsMatching 'com.box.sdkgen.transfer.TransferITest.testTransferUserContent'
    }

    testLogging {
        events = ['passed', 'failed', 'skipped']
        showStandardStreams = true
    }
}

tasks.register('smokeTest', Test) {
    description = "Runs smoke integration tests in com.box.sdk"
    group = "Verification"
    testLogging.showStandardStreams = true
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    useJUnitPlatform()

    filter {
        includeTestsMatching 'com.box.sdk.BoxAPIConnectionIT'
        includeTestsMatching 'com.box.sdk.BoxFileIT'
    }

    retry {
        maxRetries = 2
        failOnPassedAfterRetry = false
    }
}

tasks.register('smokeTestGen', Test) {
    description = "Runs integration tests in com.box.sdkgen"
    group = "Verification"
    testLogging.showStandardStreams = true
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    useJUnitPlatform()
    include '**/com/box/sdkgen/**'
    retry {
        maxRetries = 2
        failOnPassedAfterRetry = false
    }

   filter {
        includeTestsMatching 'com.box.sdkgen.auth.AuthITest'
        includeTestsMatching 'com.box.sdkgen.files.FilesITest'
        includeTestsMatching 'com.box.sdkgen.uploads.UploadsITest'
        includeTestsMatching 'com.box.sdkgen.downloads.DownloadsITest'
    }

    testLogging {
        events = ['passed', 'failed', 'skipped']
        showStandardStreams = true
    }
}


// Combined task to run both sets
tasks.register('integrationTestsAll') {
    dependsOn['integrationTest', 'integrationTestGen']
    description = "Runs all integration tests"
    group = "Verification"
}

jacoco {
    toolVersion = "0.8.10"
    reportsDirectory = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.required = true // coveralls plugin depends on xml format report
        html.required = true
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all"

    if (project.hasProperty("bootClasspath")) {
        String bootClasspathString = project.property("bootClasspath")
        String[] bootClasspath = bootClasspathString.split(File.pathSeparator)
        options.bootstrapClasspath = files(bootClasspath)
    }
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat = "full"
    }

    jacoco {
        destinationFile = file("$buildDir/jacoco/test.exec")
    }

    outputs.upToDateWhen { false }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

jacoco {
    reportsDirectory = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.required = true // coveralls plugin depends on xml format report
        html.required = true
    }
}

artifacts {
    archives sourcesJar, javadocJar
}

spotless {
    java {
        googleJavaFormat "1.7"
        target "src/**/*.java"
    }
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        boxJavaSdk(MavenPublication) {
            from components.java
            pom {
                artifactId = project.getArchivesBaseName()
                name = "Box Java SDK"
                description = "The Box SDK for Java."
                url = "https://opensource.box.com/box-java-sdk/"
                packaging = "jar"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "box"
                        name = "Box"
                        email = "sdks@box.com"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/box/box-java-sdk.git"
                    developerConnection = "scm:git:https://github.com/box/box-java-sdk.git"
                    url = "https://github.com/box/box-java-sdk"
                }
            }
        }
    }

    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}

signing {
    required { !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("publish") }
    // we are switching to gpg-agent and not using Java-based implementation because of
    // org.bouncycastle:bc-fips:1.0.2.1 libray preset in our Docker machines which is
    // not comaptible with Gradle implementation
    useGpgCmd()
    sign publishing.publications.boxJavaSdk
}

def centralUsername =  project.findProperty("centralUsername")
def centralPassword = project.findProperty("centralPassword")
jreleaser {
    signing {
        active = "NEVER"
    }
    deploy {
        maven {
            mavenCentral {
                sonatype {
                    sign = false
                    active = 'RELEASE'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository('build/staging-deploy')
                    username = centralUsername
                    password = centralPassword
                }
            }

        }
    }
}

idea {
    module {
        sourceDirs -= file("src/intTest/java")
        testSourceDirs += file("src/intTest/java")
    }
}
