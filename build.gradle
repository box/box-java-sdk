plugins {
  id "java"
  id "com.diffplug.spotless" version "${spotlessVersion}"
  id "maven-publish"
  id "signing"
  id "org.jreleaser" version "1.18.0"
  id "com.github.nbaztec.coveralls-jacoco" version "${coverallsJacocoVersion}"
  id "jacoco"
  id "org.gradle.test-retry" version "${testRetryVersion}"
}
group = "com.box"
archivesBaseName = "box-java-sdk-gen"
version = "0.1.0"
java {
  sourceCompatibility = JavaVersion.toVersion(libraryJavaVersion)
  targetCompatibility = JavaVersion.toVersion(libraryJavaVersion)
  withSourcesJar()
  withJavadocJar()
}
repositories {
  mavenCentral()
}
dependencies {
  implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonAnnotationVersion}"
  implementation "com.fasterxml.jackson.core:jackson-core:${jacksonCoreVersion}"
  implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}"
  implementation "com.squareup.okhttp3:okhttp:${okhttpVersion}"
  implementation "com.squareup.okio:okio:${okioVersion}"
  implementation "org.bitbucket.b_c:jose4j:${jose4jVersion}"
  implementation "org.bouncycastle:bcprov-jdk18on:${bouncyCastleBcprovJdk18onVersion}"
  implementation "org.bouncycastle:bcpkix-jdk18on:${bouncyCastleBcpkixJdk18onVersion}"
  testImplementation "org.junit.jupiter:junit-jupiter-api:${junitApiVersion}"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitEngineVersion}"
}
spotless {
  java {
    googleJavaFormat "${googleJavaFormatVersion}"
    target "src/**/*.java"
  }

}
test {
  useJUnitPlatform()
  retry {
    maxRetries = 2
    failOnPassedAfterRetry = false
  }

  testLogging {
    events = ['passed', 'failed', 'skipped']
    showStandardStreams = true
  }

  jacoco {
    destinationFile = file("$buildDir/jacoco/test.exec")
  }

    filter {
      // Socket timeout
      excludeTestsMatching 'com.box.sdkgen.test.transfer.TransferITest.testTransferUserContent'
  }

}
publishing {
  publications {
    boxJavaSdkGen(MavenPublication) {
      from components.java
      pom {
        artifactId = project.getArchivesBaseName()
        name = "Box Java SDK Gen"
        description = "Official Box Java Generated SDK."
        url = "https://opensource.box.com/box-java-sdk-gen/"
        packaging = "jar"
        licenses {
          license {
            name = "The Apache License, Version 2.0"
            url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
          }

        }

        developers {
          developer {
            id = "box"
            name = "box"
            email = "sdks@box.com"
          }

        }

        scm {
          connection = "scm:git:https://github.com/box/box-java-sdk-gen.git"
          developerConnection = "scm:git:https://github.com/box/box-java-sdk-gen.git"
          url = "https://github.com/box/box-java-sdk-gen"
        }

      }

    }

  }

  repositories {
    maven {
      url = layout.buildDirectory.dir('staging-deploy')
    }

  }

}
signing {
  required { !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("publish") }
  // we are switching to gpg-agent and not using Java-based implementation because of
  // org.bouncycastle:bc-fips:1.0.2.1 libray preset in our Docker machines which is
  // not compatible with Gradle implementation
  useGpgCmd()
  sign publishing.publications.boxJavaSdkGen
}
def centralUsername = project.findProperty("centralUsername")
def centralPassword = project.findProperty("centralPassword")
jreleaser {
  signing {
    active = "NEVER"
  }

  deploy {
    maven {
      mavenCentral {
        sonatype {
          active = "ALWAYS"
          url = "https://central.sonatype.com/api/v1/publisher"
          sign = false
          stagingRepository('build/staging-deploy')
          username = centralUsername
          password = centralPassword
        }

      }

    }

  }

}
jacoco {
  reportsDirectory = file("$buildDir/reports/jacoco")
}
jacocoTestReport {
  reports {
    xml.required = true
    html.required = true
  }

}
