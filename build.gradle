plugins {
    id 'com.github.nbaztec.coveralls-jacoco' version '1.2.13'
    id 'checkstyle'
    id 'jacoco'
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'eclipse'
    id 'idea'
}

sourceCompatibility = 1.8

group = 'com.box'
archivesBaseName = 'box-java-sdk'
version = '2.58.1-SNAPSHOT'

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

sourceSets {
    example {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.runtimeClasspath
        }
    }
    intTest {
        java {
            compileClasspath += sourceSets.main.output
            compileClasspath += sourceSets.test.output
            runtimeClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.test.output
        }
    }
}

configurations {
    intTestImplementation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    implementation 'com.eclipsesource.minimal-json:minimal-json:0.9.5'
    implementation 'org.bitbucket.b_c:jose4j:0.7.9'
    // Do not update to latest version, as v1.57 is needed for FIPS compliance purposes
    implementation 'org.bouncycastle:bcprov-jdk15on:1.57'
    // Do not update to latest version, as v1.57 is needed for FIPS compliance purposes
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.57'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation 'com.github.tomakehurst:wiremock:2.27.2'
    testImplementation 'org.mockito:mockito-core:4.1.0'
    testImplementation 'org.slf4j:slf4j-nop:1.7.32'
    exampleImplementation 'com.eclipsesource.minimal-json:minimal-json:0.9.5'
    checkstyle 'com.puppycrawl.tools:checkstyle:6.19'
    intTestImplementation 'junit:junit:4.13.2'
    intTestImplementation 'org.hamcrest:hamcrest-library:2.2'
    intTestImplementation 'org.mockito:mockito-core:4.1.0'
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

javadoc {
    options.windowTitle 'Box Java SDK'
    options.noQualifiers 'all'
    options.stylesheetFile file('doc/css/javadoc.css')
    options.noTree true
    options.noIndex true
    options.noHelp true
    options.noDeprecatedList true
    options.noNavBar true
    options.encoding 'utf-8'
    options.docEncoding 'utf-8'
    options.charSet 'utf-8'
    options.linkSource true
    options.links 'https://docs.oracle.com/javase/8/docs/api/'
}

task runExample(type: JavaExec, dependsOn: 'exampleClasses') {
    classpath = sourceSets.example.runtimeClasspath
    mainClass = 'com.box.sdk.example.Main'
}

task runCreateAppUser(type: JavaExec, dependsOn: 'exampleClasses') {
    classpath = sourceSets.example.runtimeClasspath
    mainClass = 'com.box.sdk.example.CreateAppUser'
}

task runAccessAsAppUser(type: JavaExec, dependsOn: 'exampleClasses') {
    classpath = sourceSets.example.runtimeClasspath
    mainClass = 'com.box.sdk.example.AccessAsAppUser'
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'Verification'
    testLogging.showStandardStreams = true
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
}

//TODO: enable JWT tests
//task integrationTestJWT(type: Test) {
//    description 'Runs the JWT based integration tests.'
//    group 'Verification'
//    testLogging.showStandardStreams = true
//    useJUnit {
//        includeCategories 'com.box.sdk.IntegrationTestJWT'
//    }
//}

jacoco {
    reportsDirectory = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.required = true // coveralls plugin depends on xml format report
        html.required = true
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:all'

    if (project.hasProperty('bootClasspath')) {
        String bootClasspathString = project.property('bootClasspath')
        String[] bootClasspath = bootClasspathString.split(File.pathSeparator)
        options.bootstrapClasspath = files(bootClasspath)
    }
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat = 'full'
    }

    jacoco {
        destinationFile = file("$buildDir/jacoco/test.exec")
    }

    outputs.upToDateWhen { false }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

artifacts {
    archives sourcesJar, javadocJar
}

test {
    useJUnit {
        excludeCategories 'com.box.sdk.IntegrationTestJWT'
    }
}

publishing {
    publications {
        boxJavaSdk(MavenPublication) {
            from components.java
            pom {
                name = 'Box Java SDK'
                description = 'The Box SDK for Java.'
                url = 'https://opensource.box.com/box-java-sdk/'
                packaging = 'jar'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'gcurtis'
                        name = 'Greg Curtis'
                        email = 'gcurtis@box.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/box/box-java-sdk.git'
                    developerConnection = 'scm:git:https://github.com/box/box-java-sdk.git'
                    url = 'https://github.com/box/box-java-sdk'
                }
            }
        }
    }

    repositories {
        maven {
            name = 'sonatype'
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }
}

signing {
    required { !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("publish") }
    sign publishing.publications.boxJavaSdk
}

idea {
    module {
        sourceDirs -= file('src/intTest/java')
        testSourceDirs += file('src/intTest/java')
    }
}
