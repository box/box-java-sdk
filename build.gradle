plugins {
    id "com.github.nbaztec.coveralls-jacoco" version "1.2.14"
    id "checkstyle"
    id "jacoco"
    id "java"
    id "maven-publish"
    id "signing"
    id "eclipse"
    id "idea"
}

sourceCompatibility = 1.8

group = "com.box"
archivesBaseName = "box-java-sdk"
version = "4.1.1"

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

sourceSets {
    example {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.runtimeClasspath
        }
    }
    intTest {
        java {
            compileClasspath += sourceSets.main.output
            compileClasspath += sourceSets.test.output
            runtimeClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.test.output
        }
    }
}

configurations {
    testsCommonImplementation.extendsFrom(implementation)
    testImplementation.extendsFrom(testsCommonImplementation)
    intTestImplementation.extendsFrom(testsCommonImplementation)
    intTestRuntimeOnly.extendsFrom(runtimeOnly)
}

dependencies {
    implementation "com.eclipsesource.minimal-json:minimal-json:0.9.5"
    implementation "org.bitbucket.b_c:jose4j:0.9.0"
    implementation("org.bouncycastle:bcprov-jdk15on") {
        version {
            strictly("1.57")
        }
        because "v1.57 is compatible with org.bouncycastle:bc-fips:1.0.2.1 which is needed for FIPS compliance purposes"
    }
    implementation("org.bouncycastle:bcpkix-jdk15on") {
        version {
            strictly("1.57")
        }
        because "v1.57 is compatible with org.bouncycastle:bc-fips:1.0.2.1 which is needed for FIPS compliance purposes"
    }
    implementation "com.squareup.okhttp3:okhttp:4.10.0"
    testsCommonImplementation "junit:junit:4.13.2"
    testsCommonImplementation "org.hamcrest:hamcrest-library:2.2"
    testsCommonImplementation "org.mockito:mockito-core:4.8.0"
    testsCommonImplementation "org.slf4j:slf4j-nop:2.0.3"
    testImplementation "com.github.tomakehurst:wiremock:2.27.2"
    exampleImplementation "com.eclipsesource.minimal-json:minimal-json:0.9.5"
    // this is last version working under java 8
    checkstyle "com.puppycrawl.tools:checkstyle:9.3"
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

javadoc {
    options.windowTitle "Box Java SDK"
    options.noQualifiers "all"
    options.stylesheetFile file("doc/css/javadoc.css")
    options.noTree true
    options.noIndex true
    options.noHelp true
    options.noDeprecatedList true
    options.noNavBar true
    options.encoding "utf-8"
    options.docEncoding "utf-8"
    options.charSet "utf-8"
    options.linkSource true
    options.links "https://docs.oracle.com/javase/8/docs/api/"
}

task runExample(type: JavaExec, dependsOn: "exampleClasses") {
    classpath = sourceSets.example.runtimeClasspath
    mainClass = "com.box.sdk.example.Main"
}

task runCreateAppUser(type: JavaExec, dependsOn: "exampleClasses") {
    classpath = sourceSets.example.runtimeClasspath
    mainClass = "com.box.sdk.example.CreateAppUser"
}

task runAccessAsAppUser(type: JavaExec, dependsOn: "exampleClasses") {
    classpath = sourceSets.example.runtimeClasspath
    mainClass = "com.box.sdk.example.AccessAsAppUser"
}

task integrationTest(type: Test) {
    description = "Runs the integration tests."
    group = "Verification"
    testLogging.showStandardStreams = true
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
}

jacoco {
    reportsDirectory = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.required = true // coveralls plugin depends on xml format report
        html.required = true
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all"

    if (project.hasProperty("bootClasspath")) {
        String bootClasspathString = project.property("bootClasspath")
        String[] bootClasspath = bootClasspathString.split(File.pathSeparator)
        options.bootstrapClasspath = files(bootClasspath)
    }
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat = "full"
    }

    jacoco {
        destinationFile = file("$buildDir/jacoco/test.exec")
    }

    outputs.upToDateWhen { false }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

artifacts {
    archives sourcesJar, javadocJar
}

test {
    useJUnit {
        excludeCategories "com.box.sdk.IntegrationTestJWT"
    }
}

checkstyle {
    ignoreFailures = false
    maxWarnings = 0
}

publishing {
    publications {
        boxJavaSdk(MavenPublication) {
            from components.java
            pom {
                artifactId = project.getArchivesBaseName()
                name = "Box Java SDK"
                description = "The Box SDK for Java."
                url = "https://opensource.box.com/box-java-sdk/"
                packaging = "jar"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "box"
                        name = "Box"
                        email = "sdks@box.com"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/box/box-java-sdk.git"
                    developerConnection = "scm:git:https://github.com/box/box-java-sdk.git"
                    url = "https://github.com/box/box-java-sdk"
                }
            }
        }
    }

    repositories {
        maven {
            name = "sonatype"
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
            if (project.hasProperty("ossrhUsername") && project.hasProperty("ossrhPassword")) {
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }
}

signing {
    required { !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("publish") }
    // we are switching to gpg-agent and not using Java-based implementation because of
    // org.bouncycastle:bc-fips:1.0.2.1 libray preset in our Docker machines which is
    // not comaptible with Gradle implementation
    useGpgCmd()
    sign publishing.publications.boxJavaSdk
}

idea {
    module {
        sourceDirs -= file("src/intTest/java")
        testSourceDirs += file("src/intTest/java")
    }
}
