package com.box.sdk;


import com.eclipsesource.json.JsonArray;
import com.eclipsesource.json.JsonObject;
import com.github.tomakehurst.wiremock.client.WireMock;
import com.github.tomakehurst.wiremock.junit.WireMockClassRule;
import org.junit.*;
import org.junit.experimental.categories.Category;

import java.io.*;
import java.net.URL;
import java.net.URLDecoder;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import static com.box.sdk.UniqueTestFolder.*;

/**
 * {@link BoxZip} related integration and unit tests.
 */
public class BoxZipTest {
    @ClassRule
    public static final WireMockClassRule WIRE_MOCK_CLASS_RULE = new WireMockClassRule(53621);
    private BoxAPIConnection api = TestConfig.getAPIConnection();

    @BeforeClass
    public static void setup() {
        setupUniqeFolder();
    }

    @AfterClass
    public static void tearDown() {
        removeUniqueFolder();
    }

    @Test
    @Category(IntegrationTest.class)
    public void createAndDownloadZipSucceeds() throws IOException {
        BoxAPIConnection api = new BoxAPIConnection(TestConfig.getAccessToken());
        BoxFolder folder = getUniqueFolder(api);
        String fileName = "small_file.rtf";
        BoxFile uploadedFile = null;
        BoxFolder createdFolder = null;
        try {
            createdFolder = folder.createFolder("Zip Test Folder").getResource();
            uploadedFile = uploadSampleFileToUniqueFolder(api, fileName).getResource();
            uploadedFile.copy(createdFolder);

            ArrayList<BoxZipItem> items = new ArrayList<>();
            BoxZipItem file = new BoxZipItem("file", uploadedFile.getID());
            BoxZipItem subFolder = new BoxZipItem("folder", createdFolder.getID());
            items.add(file);
            items.add(subFolder);

            ByteArrayOutputStream downloadStream = new ByteArrayOutputStream();
            BoxZipDownloadStatus zipDownloadStatus = new BoxZip(api).download("zip_test", items, downloadStream);
            byte[] downloadedFileContent = downloadStream.toByteArray();

            // File bytes for zips will not always be equal since they are being generated by every test.
            // To approximate that the files are equal, the assertion below checks the lengths.
            String zipFileName = "zip_test.zip";
            URL zipFileURL = this.getClass().getResource("/sample-files/" + zipFileName);
            String zipFilePath = URLDecoder.decode(zipFileURL.getFile(), "utf-8");
            byte[] zipFileContent = readAllBytes(zipFilePath);
            Assert.assertEquals(zipFileContent.length, downloadedFileContent.length);
            Assert.assertEquals(BoxZipDownloadStatus.State.SUCCEEDED, zipDownloadStatus.getState());
        } finally {
            deleteFile(uploadedFile);
            deleteFolder(createdFolder);
        }
    }

    @Test
    @Category(UnitTest.class)
    public void createZipSucceeds() throws IOException, ParseException {
        final String fileID = "466239504569";
        final String folderID = "466239504580";
        final String downloadFileName = "test";

        final String downloadURL = "https://api.box.com/zip_downloads/124hfiowk3fa8kmrwh/content";
        final String statusURL = "https://api.box.com/zip_downloads/124hfiowk3fa8kmrwh/status";
        final Date expiresAt = BoxDateFormat.parse("2018-04-25T11:00:18-07:00");

        ArrayList<BoxZipItem> items = new ArrayList<>();
        JsonArray itemsBody = new JsonArray();
        BoxZipItem file = new BoxZipItem("file", fileID);
        BoxZipItem folder = new BoxZipItem("folder", folderID);
        items.add(file);
        items.add(folder);
        itemsBody.add(file.getJSONObject()).add(folder.getJSONObject());

        JsonObject body = new JsonObject()
                .add("items", itemsBody)
                .add("download_file_name", downloadFileName);

        String result = TestConfig.getFixture("BoxZip/CreateZipFile202");

        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo("/zip_downloads"))
                .withRequestBody(WireMock.equalToJson(body.toString()))
                .willReturn(WireMock.aResponse()
                        .withHeader("Content-Type", "application/json")
                        .withBody(result)));

        BoxZip zip = new BoxZip(this.api);
        BoxZipInfo zipInfo = zip.create(downloadFileName, items);
        BoxZipConflict conflict1 = zipInfo.getNameConflicts().get(0);
        List<BoxZipConflictItem> conflict1Items = conflict1.getItems();

        Assert.assertEquals(downloadURL, zipInfo.getDownloadURL().toString());
        Assert.assertEquals(statusURL, zipInfo.getStatusURL().toString());
        Assert.assertEquals(expiresAt, zipInfo.getExpiresAt());
        Assert.assertEquals("100", conflict1Items.get(0).getID());
        Assert.assertEquals("salary.pdf", conflict1Items.get(0).getOriginalName());
        Assert.assertEquals("aqc823.pdf", conflict1Items.get(0).getDownloadName());
        Assert.assertEquals("200", conflict1Items.get(1).getID());
        Assert.assertEquals("salary.pdf", conflict1Items.get(1).getOriginalName());
        Assert.assertEquals("aci23s.pdf", conflict1Items.get(1).getDownloadName());
    }

    protected static byte[] readAllBytes(String fileName) throws IOException {
        RandomAccessFile f = new RandomAccessFile(fileName, "r");
        byte[] b = new byte[(int) f.length()];
        f.read(b);
        return b;
    }

    private void deleteFile(BoxFile file) {
        if (file != null) {
            file.delete();
        }
    }

    private void deleteFolder(BoxFolder folder) {
        if (folder != null) {
            folder.delete(true);
        }
    }
}

