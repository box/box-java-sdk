package com.box.sdk;


import static com.box.sdk.BoxApiProvider.jwtApiForServiceAccount;
import static com.box.sdk.CleanupTools.deleteFile;
import static com.box.sdk.CleanupTools.deleteFolder;
import static com.box.sdk.UniqueTestFolder.getUniqueFolder;
import static com.box.sdk.UniqueTestFolder.removeUniqueFolder;
import static com.box.sdk.UniqueTestFolder.setupUniqeFolder;
import static com.box.sdk.UniqueTestFolder.uploadSampleFileToUniqueFolder;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.URL;
import java.net.URLDecoder;
import java.util.ArrayList;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 * {@link BoxZip} related integration tests.
 */
public class BoxZipIT {
    @BeforeClass
    public static void setup() {
        setupUniqeFolder();
    }

    @AfterClass
    public static void tearDown() {
        removeUniqueFolder();
    }

    protected static byte[] readAllBytes(String fileName) throws IOException {
        RandomAccessFile f = new RandomAccessFile(fileName, "r");
        byte[] b = new byte[(int) f.length()];
        f.read(b);
        return b;
    }

    @Test
    public void createAndDownloadZipSucceeds() throws IOException {
        BoxAPIConnection api = jwtApiForServiceAccount();
        BoxFolder folder = getUniqueFolder(api);
        String fileName = "small_file.rtf";
        BoxFile uploadedFile = null;
        BoxFolder createdFolder = null;
        try {
            createdFolder = folder.createFolder("Zip Test Folder").getResource();
            uploadedFile = uploadSampleFileToUniqueFolder(api, fileName);
            uploadedFile.copy(createdFolder);

            ArrayList<BoxZipItem> items = new ArrayList<>();
            BoxZipItem file = new BoxZipItem("file", uploadedFile.getID());
            BoxZipItem subFolder = new BoxZipItem("folder", createdFolder.getID());
            items.add(file);
            items.add(subFolder);

            ByteArrayOutputStream downloadStream = new ByteArrayOutputStream();
            BoxZipDownloadStatus zipDownloadStatus = new BoxZip(api).download("zip_test", items, downloadStream);
            byte[] downloadedFileContent = downloadStream.toByteArray();

            // File bytes for zips will not always be equal since they are being generated by every test.
            // To approximate that the files are equal, the assertion below checks the lengths.
            String zipFileName = "zip_test.zip";
            URL zipFileURL = this.getClass().getResource("/sample-files/" + zipFileName);
            String zipFilePath = URLDecoder.decode(zipFileURL.getFile(), "utf-8");
            byte[] zipFileContent = readAllBytes(zipFilePath);
            Assert.assertEquals(zipFileContent.length, downloadedFileContent.length);
            Assert.assertEquals(BoxZipDownloadStatus.State.SUCCEEDED, zipDownloadStatus.getState());
        } finally {
            deleteFile(uploadedFile);
            deleteFolder(createdFolder);
        }
    }

}

